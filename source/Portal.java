/* autogenerated by Processing revision 1304 on 2025-07-24 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Portal extends PApplet {

class cPortal {
  private float pos_x;
  private float pos_y;
  private int portalColor;

  cPortal() {
    this.pos_x = random(0, width);
    this.pos_y = random(0, height);
    this.portalColor = color(100);
  }

  cPortal(float px, float py) {
    this.pos_x = px;
    this.pos_y = py;
    this.portalColor = color(100);
  }

  cPortal(float px, float py, int c) {
    this.pos_x = px;
    this.pos_y = py;
    this.portalColor = c;
  }

  public void display() {
    stroke(0);
    fill(portalColor);
    ellipse(pos_x, pos_y, 20, 40);
  }

  public float[] getPosition() {
    float[] positions = {pos_x, pos_y};
    return positions;
  }

  public void setPosition(float px, float py) {
    this.pos_x = px;
    this.pos_y = py;
  }

  public void setColor(int c) {
    this.portalColor = c;
  }

  public int getColor() {
    return portalColor;
  }
}

cPortal p1;
cPortal p2;
boolean isPortalA;
Particle[] particles;
int particleCount;

public void setup() {
  /* size commented out by preprocessor */;
  colorMode(RGB);
  p1 = new cPortal(50, 100, color(250, 100, 0, 150));
  p2 = new cPortal(300, 200, color(0, 150, 250, 150));
  isPortalA = true;
  particleCount = 30;
  particles = new Particle[particleCount];
  for (int i = 0; i < particleCount; i++) {
    particles[i] = new Particle(p1, p2);
  }
}

public void draw() {
  background(20);
  p1.display();
  p2.display();
  for (int i = 0; i < particleCount; i++) {
    Particle myParticle = particles[i];
    myParticle.update();
    myParticle.checkEdges();
    myParticle.display();
  }
}

public void mousePressed() {
  if (isPortalA) {
    p1.setPosition(mouseX, mouseY);
  } else {
    p2.setPosition(mouseX, mouseY);
  }
  isPortalA = !isPortalA;
}

class Particle {
  float pos_x;
  float pos_y;
  float vel_x;
  float vel_y;
  float size_x;
  float size_y;
  int c;

  cPortal p1, p2;
  int lastTeleportTime;

  Particle(cPortal p1, cPortal p2) {
    this.p1 = p1;
    this.p2 = p2;
    pos_x = random(0, width);
    pos_y = random(0, height);
    vel_x = random(-5, 5);
    vel_y = random(-5, 5);
    size_x = random(3, 7);
    size_y = random(3, 7);
    c = color(random(255), random(255), random(255));
    lastTeleportTime = millis();
  }

  public void update() {
    float G = 1000;
    float[] p1Pos = p1.getPosition();
    applyGravity(p1Pos[0], p1Pos[1], G);
    float[] p2Pos = p2.getPosition();
    applyGravity(p2Pos[0], p2Pos[1], G);
    pos_x += vel_x / 2;
    pos_y += vel_y / 2;
  }

  public void applyGravity(float targetX, float targetY, float G) {
    float dx = targetX - pos_x;
    float dy = targetY - pos_y;
    float rSquared = dx * dx + dy * dy;
    float minDistance = 25;
    if (rSquared < minDistance) {
      rSquared = minDistance;
    }
    float r = sqrt(rSquared);
    float force = G / rSquared;
    float fx = force * (dx / r);
    float fy = force * (dy / r);
    vel_x += fx;
    vel_y += fy;
  }

  public void checkEdges() {
    if (pos_x < 0 || pos_x > width) {
      vel_x *= -0.8f;
    }
    if (pos_y < 0 || pos_y > height) {
      vel_y *= -0.8f;
    }

    int now = millis();
    if (now - lastTeleportTime > 100) {
      float[] pos1 = p1.getPosition();
      float[] pos2 = p2.getPosition();

      float distToP1 = dist(pos_x, pos_y, pos1[0], pos1[1]);
      float distToP2 = dist(pos_x, pos_y, pos2[0], pos2[1]);

      float teleportRadius = 15;

      if (distToP1 < teleportRadius) {
        pos_x = pos2[0];
        pos_y = pos2[1];
        lastTeleportTime = now;
      } else if (distToP2 < teleportRadius) {
        pos_x = pos1[0];
        pos_y = pos1[1];
        lastTeleportTime = now;
      }
    }
  }

  public void display() {
    stroke(0);
    fill(c);
    rect(pos_x, pos_y, size_x, size_y);
  }
}


  public void settings() { size(960, 540); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Portal" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
